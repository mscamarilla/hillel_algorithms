/*
* Решить следующую задачу: (5 баллов)
Имеется массив баннеров, который задается своим весом (1 - 100) чем выше вес, тем чаще он должен выпадать. Так же у баннера имеется название и ссылка на картинка, но это не имеет никакого отношения к этой задаче. Будем считать баннер имеет вид: { id: int, weight: int }, id - номер баннера,
weight - вес (1-100)
Баннеров может быть до N = 10^6
Необходимо реализовать функцию getBanner - которая случайным образом должна выдать какой-то из баннеров учитывая их веса
Примеры:
            [ { id: 1, weight: 15 }] - всегда будет получать один и тот же 1 баннер
            [ { id: 1, weight: 20 }, { id: 2, weight: 20 } ] - с одинаковой вероятностью 50% должны выпадать каждый из баннеров
            [ { id: 1, weight: 5 }, { id: 2, weight: 20 } ] - 1ый выпадает с вероятностью 20%, второй с вероятностью 80%
            [ { id: 1, weight: 10 }, { id: 2, weight: 20 }, { id: 3, weight: 40 } ] - вероятность баннеров в этом случае : 1/7, 2/7, 4/7 - соответственно
            [ { id: 1, weight: 2 }, { id: 2, weight: 4 }, { id: 3, weight: 4 } ] - вероятность выпадения будет следующая: 20%, 40%, 40%

функция getBanner() - должна вернуть индекс баннера

*/

function getBanner(n, data) {

    let range = 1;
    let dataArray = [];

    //Общий рэндж баннеров будет сумма их весов
    //Каждый баннер получает рендж равный своему весу по порядку:
    //если баннеры [60, 60, 40], то их вес будет [1-61, 62-122, 123-163]
    for (let i = 0; i < n; i++) {

        let banner = {};
        banner.id = i + 1;
        banner.min = range;
        banner.max = range + data[i];
        banner.weight = data[i];

        range += data[i]+1;

        dataArray[i] = banner;

    }

    //Случайное число генерируется в диапазоне от 1 до суммы всех весов (+n для того, чтоб диапазоны не пересекались)
    //тот элемент массива, который содержит в себе случайное число в диапазоне min<k<max и есть искомый баннер, выпавший с соблюдением вероятности
    //range-1 потому, что из-за цикла выше, диапазон будет на 1 больше, чем нужно в последней итерации
    let number = Math.floor(1 + Math.random() * (range-1));
    //console.log(number);

    return binarySearch(dataArray, number);
}

function binarySearch(arr, k) {

    let l = 0;
    let r = arr.length - 1;
    let res = 0;


    while (l <= r) {
        let m = Math.floor((l + r) / 2);

        if (arr[m].min < k && k <= arr[m].max) {
            res = arr[m].id;
        }

        if (arr[m].max < k) {
            l = m + 1;
        } else {
            r = m - 1;
        }

    }

    return res;

}


let n = 3;
let data = [10, 20, 40];
console.log(getBanner(n, data));
